package com.joeseff.hackerrank;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.junit.Test;

/*
 * @author JWachiuri
 * @created Monday 09-Mar-2020
 *
 */

public class SolutionTest {

	/**
	 * Test method for
	 * {@link com.joeseff.hackerrank.Solution#isArrayReverseSorted(int[])}.
	 */
	@Test
	public void testIsArrayReverseSorted() {
		int[] originalArray = { 5, 4, 3, 2, 1 };
		int[] modifiedArray = { 2, 3, 4, 1, 5 };

		assertTrue(Solution.isArrayReverseSorted(originalArray));
		assertFalse(Solution.isArrayReverseSorted(modifiedArray));
	}

	/**
	 * Test method for
	 * {@link com.joeseff.hackerrank.Solution#findIndex(int[], int)}.
	 */
	@Test
	public void testFindIndex() {
		int[] modifiedArray = { 2, 3, 4, 1, 5 };
		assertEquals(1, Solution.findIndex(modifiedArray, 3, 0));
	}

	/**
	 * Test method for
	 * {@link com.joeseff.hackerrank.Solution#swap(int[], int, int)}.
	 */
	@Test
	public void testSwap() {
		int[] modifiedArray = { 2, 3, 4, 1, 5 };
		int[] returnedArray = Solution.swap(modifiedArray, 5, 0);
		assertEquals(0, Solution.findIndex(returnedArray, 5, 0));
	}

	/**
	 * Test method for
	 * {@link com.joeseff.hackerrank.Solution#largestPermutation(int, int[])}.
	 */
	@Test
	public void testLargestPermutation() {
		int[] originalArray = { 4, 2, 3, 5, 1 };
		int[] expectedArray = { 5, 2, 3, 4, 1 };

		int[] or2 = { 138, 163, 109, 46, 85, 21, 18, 124, 149, 139, 128, 156, 73, 2, 129, 142, 166, 78, 162, 102, 13,
				36, 150, 161, 134, 69, 41, 111, 31, 116, 87, 12, 47, 72, 22, 35, 82, 89, 130, 43, 44, 71, 115, 66, 90,
				178, 40, 7, 67, 95, 146, 88, 59, 34, 154, 81, 137, 99, 159, 174, 96, 14, 32, 8, 24, 77, 160, 170, 5, 70,
				97, 172, 83, 151, 33, 145, 68, 127, 51, 56, 4, 126, 55, 177, 29, 123, 148, 108, 53, 57, 17, 135, 63,
				114, 143, 94, 19, 157, 171, 26, 110, 11, 173, 10, 106, 100, 30, 58, 74, 45, 120, 144, 39, 175, 48, 20,
				37, 42, 75, 25, 141, 50, 153, 80, 49, 132, 65, 140, 152, 54, 64, 101, 92, 103, 155, 61, 60, 121, 107,
				76, 136, 79, 117, 133, 104, 86, 16, 91, 179, 118, 122, 169, 168, 84, 113, 28, 3, 164, 105, 62, 38, 125,
				147, 52, 119, 112, 1, 15, 23, 176, 27, 158, 93, 98, 165, 167, 6, 131, 9 };

		int[] ex2 = { 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161,
				160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140,
				139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119,
				118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98,
				97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72,
				71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46,
				45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20,
				19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };

		int[] or3 = { 145, 161, 11, 116, 64, 85, 158, 167, 125, 14, 104, 34, 15, 119, 51, 118, 63, 188, 166, 113, 114,
				194, 126, 53, 133, 109, 48, 40, 32, 52, 108, 62, 153, 105, 44, 129, 89, 186, 45, 73, 115, 66, 130, 56,
				141, 197, 36, 192, 107, 24, 22, 152, 81, 137, 111, 101, 100, 144, 9, 16, 31, 154, 198, 159, 70, 179, 50,
				172, 39, 155, 79, 37, 87, 69, 121, 134, 93, 7, 5, 17, 110, 122, 96, 103, 177, 193, 95, 33, 164, 71, 143,
				82, 77, 75, 162, 191, 102, 19, 91, 94, 157, 184, 35, 23, 99, 180, 182, 6, 59, 176, 146, 13, 165, 135, 3,
				4, 195, 112, 189, 30, 27, 168, 123, 41, 57, 136, 190, 29, 132, 76, 38, 1, 10, 83, 124, 163, 20, 117,
				178, 2, 42, 84, 12, 171, 67, 43, 58, 183, 8, 138, 68, 149, 131, 47, 74, 60, 80, 90, 78, 160, 169, 21,
				61, 187, 92, 25, 181, 147, 88, 106, 55, 97, 150, 120, 128, 139, 140, 175, 26, 127, 173, 185, 65, 196,
				86, 28, 98, 54, 142, 18, 151, 46, 49, 170, 174, 156, 148, 72 };

		int[] ex3 = { 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180,
				179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159,
				158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138,
				137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117,
				116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95,
				94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69,
				68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43,
				42, 41, 40, 39, 38, 37, 36, 35, 12, 25, 13, 15, 23, 19, 27, 3, 34, 5, 30, 16, 9, 7, 26, 21, 29, 17, 4,
				11, 2, 28, 10, 1, 6, 18, 20, 14, 31, 32, 33, 24, 22, 8 };

		int[] ph2 = Solution.largestPermutation(220, or2);
		int[] ph3 = Solution.largestPermutation(162, or3);

		System.out.println(Arrays.toString(ph3));

		assertArrayEquals(expectedArray, Solution.largestPermutation(1, originalArray));
		assertArrayEquals(ex2, ph2);
		assertArrayEquals(ex3, ph3);
	}

}
